"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var _ = __importStar(require("lodash"));
var SPACE_AS_BITS = utils_1.unicodeToBitsAsString(" ");
var
var
var C1XORC2 = utils_1.XORStrings(C1, C2);
var M = "the";
var MAsBits = utils_1.unicodeToBitsAsString(M);
var SIZE = C1.length;
// for (let i = 0; i < C1.length - M.length; i++) {
//   let MPrime = _.padStart(MAsBits, i, SPACE_AS_BITS);
//   MPrime = _.padEnd(MPrime, C1.length, SPACE_AS_BITS);
//   const possibleMessage = XORStrings(MPrime, C1XORC2);
//   const unicode = binaryToUnicode(possibleMessage);
//   let valid = true;
//   for (let j = 0; j < unicode.length; j++) {
//     // if any non latin character encountered
//     if (unicode[j].charCodeAt(0) < 32 || unicode[j].charCodeAt(0) > 126) {
//       valid = false;
//       break;
//     }
//   }
//   if (valid) {
//     console.log(
//       `${i} -----------------------------------------------------------------------`
//     );
//     console.log(unicode);
//   }
//   const a = 2;
// }
var test = function () {
    var key
    var M1 = "hello";
    var M2 = "world";
    var C1 = utils_1.oneTimePadEncrypt(M1, key);
    var C2 = utils_1.oneTimePadEncrypt(M2, key);
    var C1XORC2 = utils_1.XORStrings(C1, C2);
    var wordsToCheck = ["hello", "world"];
    wordsToCheck.forEach(function (word) {
        _.range(0, key.length).forEach(function (index) {
            var possibleMessage = checkWord(word, index, key, C1XORC2);
            if (checkValid(possibleMessage)) {
                console.log("Possible message: " + possibleMessage + ". Word: " + word + ". Index: " + index);
            }
        });
    });
    var b = 2;
};
var checkWord = function (word, offset, key, C1XORC2) {
    return utils_1.binaryToUnicode(utils_1.XORStrings(utils_1.unicodeToBitsAsString(utils_1.padWithSpaces(word, offset, key.length)), C1XORC2));
};
var checkValid = function (sentence) {
    var valid = true;
    for (var i = 0; i < sentence.length; i++) {
        if (sentence[i].charCodeAt(0) > 126 || sentence[i].charCodeAt(0) < 32) {
            return false;
        }
    }
    return valid;
};
var getCipherText = function (M1, key) {
    return utils_1.oneTimePadEncrypt(utils_1.unicodeToBitsAsString(utils_1.padWithSpaces(M1, 0, key.length)), key);
};
test();
//# sourceMappingURL=index.js.map