import {
  binaryToUnicode,
  DEFAULT_UNICODE_LENGTH,
  oneTimePadDecrypt,
  oneTimePadEncrypt,
  padWithSpaces,
  unicodeToBitsAsString,
  XORStrings,
} from "./utils";
import * as _ from "lodash";
import fs from "fs";
import chalk from "chalk";

const C1 =

const C2 =


const text = fs.readFileSync("./data/text.txt", "utf8");
const textByLine = text.split(/\r\n/).filter((word) => word.length >= 4);
const cc = 2;
const partialWordSearch: { [uffix: string]: string } = {};
textByLine.forEach((word) => {
  if (word === "product") {
    const e = 2;
  }
  const g = 2;
  for (let i = 0; i < word.length; i++) {
    const prefix = word.slice(i);
    if (prefix.length >= 3) {
      partialWordSearch[prefix] = word;
    }
  }
  const t = 2;
});
/*
 * Runs one time pad decryption on known strings so you can see what happens
 * */
const test1 = () => {
  const key =

  // change this value. When "M" comes out as something like an english sentence, hardcode those values into your guess for M2
  const C1 =

  const C2 =

  const C1XORC2 = XORStrings(C1, C2);

  let messageSoFar = _.range(0, key.length / DEFAULT_UNICODE_LENGTH).map(
    (index) => " "
  );
  const words: { [word: string]: number[] } = {
    the: [89],
    // coffee: [4],
  };
  Object.entries(words).forEach(([key, value]) => {
    value.forEach((startPos) => {
      key.split("").forEach((letter, index) => {
        if (messageSoFar[startPos + index] !== " ") {
          throw Error(`trying to place word in non empty spot`);
        }
        messageSoFar[startPos + index] = letter;
      });
    });
  });
  console.log(chalk.green(`Message so far: "${messageSoFar.join("")}"`));

  const wordsToCheck = ["and"];

  textByLine.forEach((word) => {
    console.log(`\n M_Prime: "${word}"`);
    _.range(0, key.length / DEFAULT_UNICODE_LENGTH - word.length).forEach(
      (numberOfLeadingSpaces) => {
        // about 121 loops
        if (messageSoFar[numberOfLeadingSpaces] === " ") {
          // only try to insert if nothing already
          if (
            numberOfLeadingSpaces + word.length >
            key.length / DEFAULT_UNICODE_LENGTH
          ) {
            // need to shorten the word being tested
            word = word.slice(1);
          }
          const M_Prime = padWithSpaces(
            word,
            numberOfLeadingSpaces,
            key.length
          );
          const M = testPossibleM_Prime(M_Prime, C1XORC2);
          const start =
            numberOfLeadingSpaces - (numberOfLeadingSpaces === 0 ? 0 : 1);
          const end = numberOfLeadingSpaces + word.length + 1; // plus one for the space
          const sectionOfInterest = M.slice(start, end);
          if (word === "what" && start === 44) {
            const r = 2;
          }
          if (checkValidWithLookup(sectionOfInterest.trim())) {
            console.log(
              M.slice(0, start) +
                chalk.green(M.slice(start, end)) +
                M.slice(end) +
                `              from: ${start} to ${end}`
            );
          }
        }
      }
    );
  });

  const b = 2;
};

/*
 * Function for checking result of M_Prime XOR with C1 XOR C2
 * */
const testPossibleM_Prime = (M_Prime: string, C1XORC2: string) => {
  return binaryToUnicode(XORStrings(unicodeToBitsAsString(M_Prime), C1XORC2));
};

const checkValidWithLookup = (partial: string) => {
  return !!partialWordSearch[partial];
};

/*
 * Checks iSample Textf message contains all latin characters
 * */
const checkValidWithRegex = (sentence: string): boolean => {
  const regex = /[a-zA-Z\s.]+/;
  for (let i = 0; i < sentence.length; i++) {
    if (!regex.test(sentence[i])) {
      return false;
    }
  }
  return true;
};

test1();
